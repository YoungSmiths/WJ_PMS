group 'com.wj'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-security")
    compile 'org.springframework.boot:spring-boot-starter-web:1.4.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-devtools:1.4.3.RELEASE'
    compile 'org.springframework:springloaded:1.2.5.RELEASE'
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0'
    compile 'mysql:mysql-connector-java:5.1.40'
    compile 'com.alibaba:druid:1.0.29'
    compile 'commons-io:commons-io:2.4'
    compile 'com.alibaba:fastjson:1.2.49'
    compile 'com.google.guava:guava:25.1-jre'
    compile 'org.aspectj:aspectjweaver:1.8.13'

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'

}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.13'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    distributionUrl = 'https://downloads.gradle.org/distributions/gradle-3.2.1-all.zip'
}


allprojects {
    group 'com.wj.pms'
    version '1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'java'

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        // maven { url "http://172.16.31.9:8081/nexus/content/groups/public/" }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
}

idea {
    module {
        ["log"].each {
            excludeDirs += file("$projectDir/$it")
        }
    }
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/myBatisGenerator/config.properties").withInputStream {
        inputStream -> properties.load(inputStream)
    }
    properties
}

task mybatisGenerate {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/myBatisGenerator/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
